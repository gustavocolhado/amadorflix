// Schema para o banco de vídeos e criadores
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/videos-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_VIDEOS")
}

model Video {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String?  // Título em português (pt)
  title_en     String?  // Título em inglês
  title_es     String?  // Título em espanhol
  category     String[]
  description  String?
  description_en     String?  // Título em inglês
  description_es     String?  // Título em espanhol
  url          String   @unique
  url_en       String?  // Título em inglês
  url_es       String?  // Título em espanhol
  viewCount    Int
  likesCount   Int
  videoUrl     String
  thumbnailUrl String
  duration     Float?
  premium      Boolean
  creator      String?
  iframe       Boolean @default(false)
  trailerUrl   String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
  userId       String?  @db.ObjectId
  comments     Comment[]
  likes        UserLike[]
  favorites    UserFavorite[]
  history      UserHistory[]
  videoTags    VideoTag[] @relation("VideoToTags")
}

model Tag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  qtd       Int       @default(0)
  slug       String   @unique   
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  videoTags VideoTag[] @relation("TagToVideos")
}

model VideoTag {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId  String   @db.ObjectId
  tagId    String   @db.ObjectId
  video    Video    @relation(fields: [videoId], references: [id], name: "VideoToTags")
  tag      Tag      @relation(fields: [tagId], references: [id], name: "TagToVideos")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  video     Video    @relation(fields: [videoId], references: [id])
  userId    String   @db.ObjectId
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  qtd Int?
  images String?
  slug String? @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  userId String? @db.ObjectId
}

model Creator {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  qtd Int?
  description   String?
  image     String?
  created_at DateTime? @default(now())
  update_at DateTime? @default(now())
  userId String? @db.ObjectId
}

model UserLike {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  videoId String @db.ObjectId
  video   Video @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId]) // Garante que cada combinação de userId e videoId seja única
}

model UserFavorite {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  videoId String @db.ObjectId
  video   Video @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, videoId]) // Garante que cada combinação de userId e videoId seja única
}

model UserHistory {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  videoId String @db.ObjectId
  video   Video @relation(fields: [videoId], references: [id])
  watchedAt DateTime @default(now())
  watchDuration Int? // Duração em segundos que o usuário assistiu

  @@unique([userId, videoId]) // Garante que cada combinação de userId e videoId seja única
}
