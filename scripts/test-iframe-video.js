const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testIframeVideo() {
  try {
    console.log('üß™ Testando v√≠deo com iframe...')
    
    // Buscar um v√≠deo que seja iframe
    const video = await prisma.video.findFirst({
      where: {
        iframe: true,
        videoUrl: { not: '' }
      }
    })
    
    if (!video) {
      console.log('‚ùå Nenhum v√≠deo iframe encontrado no banco')
      return
    }
    
    console.log('‚úÖ V√≠deo iframe encontrado para teste:')
    console.log(`   ID: ${video.id}`)
    console.log(`   URL: ${video.url}`)
    console.log(`   T√≠tulo: ${video.title}`)
    console.log(`   Video URL: ${video.videoUrl}`)
    console.log(`   Thumbnail: ${video.thumbnailUrl}`)
    console.log(`   Iframe: ${video.iframe}`)
    
    // Verificar se a URL √© do formato esperado
    const isVazadexEmbed = video.videoUrl.includes('videos.vazadex.com/embed/')
    console.log(`\nüîó Verifica√ß√£o da URL:`)
    console.log(`   √â embed do Vazadex: ${isVazadexEmbed ? '‚úÖ' : '‚ùå'}`)
    
    if (isVazadexEmbed) {
      const embedMatch = video.videoUrl.match(/\/embed\/(\d+)/)
      if (embedMatch) {
        const videoId = embedMatch[1]
        console.log(`   ID do v√≠deo extra√≠do: ${videoId}`)
        console.log(`   URL completa: ${video.videoUrl}`)
      }
    }
    
    // Testar acessibilidade da URL
    console.log('\nüåê Testando acessibilidade da URL...')
    try {
      const response = await fetch(video.videoUrl)
      console.log(`   Status: ${response.status}`)
      console.log(`   OK: ${response.ok ? '‚úÖ' : '‚ùå'}`)
      
      if (response.ok) {
        const contentType = response.headers.get('content-type')
        console.log(`   Content-Type: ${contentType}`)
      }
    } catch (error) {
      console.log(`   ‚ùå Erro ao acessar URL: ${error.message}`)
    }
    
    // Simular como seria renderizado na p√°gina
    console.log('\nüìã Simula√ß√£o da p√°gina:')
    console.log(`   isIframe: ${video.iframe}`)
    console.log(`   videoUrl: ${video.videoUrl}`)
    console.log(`   poster: ${video.thumbnailUrl}`)
    
  } catch (error) {
    console.error('‚ùå Erro ao testar v√≠deo iframe:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testIframeVideo() 