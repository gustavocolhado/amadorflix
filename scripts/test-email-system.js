// Importar usando import din√¢mico para m√≥dulos ES6/TypeScript
async function loadEmailModule() {
  try {
    // Tentar importar o m√≥dulo compilado
    const emailModule = await import('../lib/email.js');
    return emailModule;
  } catch (error) {
    console.log('‚ùå Erro ao carregar m√≥dulo de email:', error.message);
    console.log('üí° Certifique-se de que o projeto est√° compilado ou use a API de teste');
    return null;
  }
}

async function testEmailSystem() {
  console.log('üß™ Testando sistema de email...\n');

  // Carregar m√≥dulo de email
  const emailModule = await loadEmailModule();
  if (!emailModule) {
    console.log('‚ùå N√£o foi poss√≠vel carregar o m√≥dulo de email');
    console.log('üí° Use a API de teste em: http://localhost:3000/api/test-email');
    return;
  }

  const { sendPaymentConfirmationEmail, testEmailConfiguration } = emailModule;

  // Testar configura√ß√£o de email
  console.log('1. Testando configura√ß√£o SMTP...');
  try {
    const configOk = await testEmailConfiguration();
    if (configOk) {
      console.log('‚úÖ Configura√ß√£o SMTP OK');
    } else {
      console.log('‚ùå Erro na configura√ß√£o SMTP');
      console.log('Verifique as vari√°veis de ambiente:');
      console.log('- SMTP_HOST');
      console.log('- SMTP_PORT');
      console.log('- SMTP_USER');
      console.log('- SMTP_PASS');
      return;
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar configura√ß√£o:', error.message);
    return;
  }

  // Testar envio de email
  console.log('\n2. Testando envio de email de confirma√ß√£o...');
  
  const testEmailData = {
    userEmail: 'teste@exemplo.com', // Substitua por um email real para teste
    userName: 'Usu√°rio Teste',
    planName: 'Plano Mensal (1 m√™s)',
    planDuration: '30 dias',
    expireDate: '15/01/2024',
    telegramChannel: 'https://t.me/amadorflixvip',
    telegramBot: 'https://t.me/amadorflixbot',
    loginUrl: 'http://localhost:3000/login'
  };

  try {
    const emailSent = await sendPaymentConfirmationEmail(testEmailData);
    if (emailSent) {
      console.log('‚úÖ Email de teste enviado com sucesso!');
      console.log('üìß Verifique a caixa de entrada do email:', testEmailData.userEmail);
    } else {
      console.log('‚ùå Falha ao enviar email de teste');
    }
  } catch (error) {
    console.log('‚ùå Erro ao enviar email:', error.message);
  }

  console.log('\nüìã Checklist de configura√ß√£o:');
  console.log('‚ñ° SMTP_HOST configurado');
  console.log('‚ñ° SMTP_PORT configurado (587 para Gmail)');
  console.log('‚ñ° SMTP_USER configurado (seu email)');
  console.log('‚ñ° SMTP_PASS configurado (senha de app do Gmail)');
  console.log('‚ñ° TELEGRAM_CHANNEL configurado');
  console.log('‚ñ° TELEGRAM_BOT configurado');
  console.log('‚ñ° NEXTAUTH_URL configurado');
  
  console.log('\nüí° Dicas:');
  console.log('- Para Gmail, use senha de aplicativo, n√£o sua senha normal');
  console.log('- Ative a verifica√ß√£o em 2 etapas no Gmail');
  console.log('- Gere uma senha de aplicativo espec√≠fica para este projeto');
  console.log('- Teste com um email real para verificar se est√° funcionando');
}

// Executar teste se chamado diretamente
if (require.main === module) {
  testEmailSystem().catch(console.error);
}

module.exports = { testEmailSystem };
